import 'dart:core';
import 'dart:js_util';

import 'package:device_preview/device_preview.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:flutter_map/flutter_map.dart';
import 'package:latlong2/latlong.dart';
import 'package:geolocator/geolocator.dart';
import 'package:http/http.dart' as http;
import 'package:flutter_dotenv/flutter_dotenv.dart';
import 'dart:convert';
import 'dart:async';
import '../TomTomApi.dart' as TomTomApi;

void main() {
  runApp(const MapPage(title: 'Map'));
  runApp(
    DevicePreview(
      enabled: true,
      tools: const [
        ...DevicePreview.defaultTools
      ],
      builder: (context) => const MapPage(title: 'map',),
    ),
  );
}

class MapPage extends StatefulWidget {
  const MapPage({Key? key, required this.title}) : super(key: key);

  final String title;

  @override
  State<MapPage> createState() => _MapPageState();
}

Future<dynamic> searchNearby(double latitude, double longitude, {int radius = 50000}) async {
  String apiKey = dotenv.get("apiKey");
  final apiUrl =
      'https://api.tomtom.com/search/2/nearbySearch/.json?key=$apiKey&lat=$latitude&lon=$longitude&radius=$radius&categorySet=7311';

  try {
    // debugPrint('TomTom API URL: $apiUrl');
    final response = await http.get(Uri.parse(apiUrl), headers: {
      'Content-Type': 'application/json',
    });
    if (response.statusCode == 200) {
      final results = response.body;
      // final results = await json.encoder.convert(response.body);
      //  debugPrint('TomTom API Results: $results');
      //
      await json.decode(results);
      return results;
    } else {
      debugPrint('Failed to fetch data from TomTom API. Status code: ${response.statusCode}');
    }
  } catch (e) {
    debugPrint('Error making request to TomTom API: $e');
  }
  return {};
}
void delayed() async {
  await Future.delayed(Duration(seconds: 30));
}

class _MapPageState extends State<MapPage> {
  final MapController _mapController = MapController();
  List<Marker> nearbyPoiMarkers = [];

  @override
  void initState() {
    super.initState();
    fetchNearbyPoiMarkers();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Center(
        child: FlutterMap(
          mapController: _mapController,
          options: MapOptions(
            initialCenter: LatLng(0, 0),
          ),
          children: [
            MarkerLayer(
              markers: [
                ...nearbyPoiMarkers,
                Marker(
                  width: 40.0,
                  height: 40.0,
                  point: LatLng(0, 0),
                  child: GestureDetector(
                    onTap: () {
                      debugPrint("Marker tapped");
                    },
                    child: const ImageIcon(
                      AssetImage("assets/images/location.png"),
                      size: 24,
                    ),
                  ),
                ),
              ],
            ),
          ],
        ),
      ),
    );
  }

  @override
  void didUpdateWidget(MapPage oldWidget) {
    super.didUpdateWidget(oldWidget);
    debugPrint("MapPage didUpdateWidget");
    fetchNearbyPoiMarkers();
  }

  @override
  void dispose() {
    super.dispose();
  }

  Future<void> fetchNearbyPoiMarkers() async {
    try {
      var result = await searchNearby(51.9886174, 5.4989983);
      var decodedResult = jsonDecode(result) as Map<String, dynamic>;
      var autogenResult = TomTomApi.Autogenerated.fromJson(decodedResult);

      setState(() {
        nearbyPoiMarkers = autogenResult.results!.map((e) =>
            Marker(
              point: LatLng(e.position!.lat as double, e.position!.lon as double),
              child: const ImageIcon(
                AssetImage("assets/images/location.png"),
                size: 24,
              ),
            ),
        ).toList();
      });
    } catch (error) {
      debugPrint("Error fetching nearby POI markers: $error");
    }
  }
}


class TestElement{
  final TestPosition position;
  TestElement(this.position);
}

class TestPosition{
  final double lat;
  final double lon;
  TestPosition(this.lat, this.lon);
}